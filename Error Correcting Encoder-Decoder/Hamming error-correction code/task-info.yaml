type: edu
custom_name: stage5
files:
- name: src/correcter/Main.java
  visible: true
  text: "package correcter;\n\nimport java.io.*;\nimport java.nio.charset.StandardCharsets;\n\
    import java.util.Random;\nimport java.util.Scanner;\n\npublic class Main {\n\n\
    \    private static void encode() {\n        try (InputStream reader = new FileInputStream(\"\
    send.txt\");\n             FileOutputStream writer = new FileOutputStream(\"encoded.txt\"\
    )) {\n            int curByte = reader.read();\n            StringBuilder textView\
    \ = new StringBuilder();\n            StringBuilder textHexView = new StringBuilder();\n\
    \            StringBuilder textBinView = new StringBuilder();\n\n            StringBuilder\
    \ encodedExpandView = new StringBuilder();\n            StringBuilder encodedParityView\
    \ = new StringBuilder();\n            StringBuilder encodedHexView = new StringBuilder();\n\
    \n            byte[] encoding = new byte[] {0, 0, 0, 0, 0, 0, 0, 0};\n       \
    \     int encodedBytesLength = encoding.length;\n            System.out.println(\"\
    send.txt:\");\n            while (curByte != -1) {\n                encodedBytesLength\
    \ = 8;\n                textView.append((char) curByte);\n                textHexView.append(String.format(\"\
    %02X \", curByte));\n                textBinView.append(String.format(\"%8s\"\
    , Integer.toBinaryString(curByte)).replace(' ', '0') + \" \");\n\n           \
    \     int bitStatus = 0;\n\n                encoding[0] = 0;\n               \
    \ bitStatus = curByte >> 7 & 1;\n                encoding[0] |= bitStatus << 7\
    \ | bitStatus << 6;\n                encodedExpandView.append(bitStatus);\n  \
    \              encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n\n                bitStatus\
    \ = curByte >> 6 & 1;\n                encoding[0] |= bitStatus << 5 | bitStatus\
    \ << 4;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 5 & 1;\n                encoding[0] |= bitStatus << 3 | bitStatus\
    \ << 2;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                // parity\n\
    \                bitStatus = (curByte >> 7 & 1) ^ (curByte >> 6 & 1) ^ (curByte\
    \ >> 5 & 1);\n                encoding[0] |= bitStatus << 1 | bitStatus;\n   \
    \             encodedExpandView.append(\".\");\n                encodedExpandView.append(\"\
    .\");\n                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                encoding[1] = 0;\n                encodedExpandView.append(\"\
    \ \");\n                encodedParityView.append(\" \");\n                bitStatus\
    \ = curByte >> 4 & 1;\n                encoding[1] |= bitStatus << 7 | bitStatus\
    \ << 6;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 3 & 1;\n                encoding[1] |= bitStatus << 5 | bitStatus\
    \ << 4;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 2 & 1;\n                encoding[1] |= bitStatus << 3 | bitStatus\
    \ << 2;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                // parity\n\
    \                bitStatus = (curByte >> 4 & 1) ^ (curByte >> 3 & 1) ^ (curByte\
    \ >> 2 & 1);\n                encoding[1] |= bitStatus << 1 | bitStatus;\n   \
    \             encodedExpandView.append(\".\");\n                encodedExpandView.append(\"\
    .\");\n                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                encoding[2] = 0;\n                encodedExpandView.append(\"\
    \ \");\n                encodedParityView.append(\" \");\n                bitStatus\
    \ = curByte >> 1 & 1;\n                encoding[2] |= bitStatus << 7 | bitStatus\
    \ << 6;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte & 1;\n                encoding[2] |= bitStatus << 5 | bitStatus <<\
    \ 4;\n                encodedExpandView.append(bitStatus);\n                encodedExpandView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                curByte = reader.read();\n                if (curByte == -1)\
    \ {\n                    // parity\n                    encodedExpandView.append(\"\
    .\");\n                    encodedExpandView.append(\".\");\n                \
    \    encodedParityView.append(\"0\");\n                    encodedParityView.append(\"\
    0\");\n\n                    bitStatus = (curByte >> 1 & 1) ^ (curByte & 1);\n\
    \                    encoding[2] |= bitStatus << 1 | bitStatus;\n            \
    \        encodedExpandView.append(\".\");\n                    encodedExpandView.append(\"\
    .\");\n                    encodedParityView.append(bitStatus);\n            \
    \        encodedParityView.append(bitStatus);\n                    encodedBytesLength\
    \ = 3;\n                    continue;\n                }\n                textView.append((char)\
    \ curByte);\n                textHexView.append(String.format(\"%02X \", curByte));\n\
    \                textBinView.append(String.format(\"%8s\", Integer.toBinaryString(curByte)).replace('\
    \ ', '0') + \" \");\n\n                // 2nd byte\n                bitStatus\
    \ = curByte >> 7 & 1;\n                encoding[2] |= bitStatus << 3 | bitStatus\
    \ << 2;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                // parity\n\
    \                bitStatus = (encoding[2] >> 7 & 1) ^ (encoding[2] >> 5 & 1) ^\
    \ (encoding[2] >> 3 & 1);\n                encoding[2] |= bitStatus << 1 | bitStatus;\n\
    \                encodedExpandView.append(\".\");\n                encodedExpandView.append(\"\
    .\");\n                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                encoding[3] = 0;\n                encodedExpandView.append(\"\
    \ \");\n                encodedParityView.append(\" \");\n                bitStatus\
    \ = curByte >> 6 & 1;\n                encoding[3] |= bitStatus << 7 | bitStatus\
    \ << 6;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 5 & 1;\n                encoding[3] |= bitStatus << 5 | bitStatus\
    \ << 4;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 4 & 1;\n                encoding[3] |= bitStatus << 3 | bitStatus\
    \ << 2;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                //parity\n\
    \                bitStatus = (encoding[3] >> 7 & 1) ^ (encoding[3] >> 5 & 1) ^\
    \ (encoding[3] >> 3 & 1);\n                encoding[3] |= bitStatus << 1 | bitStatus;\n\
    \                encodedExpandView.append(\".\");\n                encodedExpandView.append(\"\
    .\");\n                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                encoding[4] = 0;\n                encodedExpandView.append(\"\
    \ \");\n                encodedParityView.append(\" \");\n                bitStatus\
    \ = curByte >> 3 & 1;\n                encoding[4] |= bitStatus << 7 | bitStatus\
    \ << 6;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 2 & 1;\n                encoding[4] |= bitStatus << 5 | bitStatus\
    \ << 4;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 1 & 1;\n                encoding[4] |= bitStatus << 3 | bitStatus\
    \ << 2;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                //parity\n\
    \                bitStatus = (encoding[4] >> 7 & 1) ^ (encoding[4] >> 5 & 1) ^\
    \ (encoding[4] >> 3 & 1);\n                encoding[4] |= bitStatus << 1 | bitStatus;\n\
    \                encodedExpandView.append(\".\");\n                encodedExpandView.append(\"\
    .\");\n                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                encoding[5] = 0;\n                encodedExpandView.append(\"\
    \ \");\n                encodedParityView.append(\" \");\n                bitStatus\
    \ = curByte & 1;\n                encoding[5] |= bitStatus << 7 | bitStatus <<\
    \ 6;\n                encodedExpandView.append(bitStatus);\n                encodedExpandView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                curByte = reader.read();\n                if (curByte == -1)\
    \ {\n                    // parity\n                    encodedExpandView.append(\"\
    .\");\n                    encodedExpandView.append(\".\");\n                \
    \    encodedExpandView.append(\".\");\n                    encodedExpandView.append(\"\
    .\");\n\n                    encodedParityView.append(\"0\");\n              \
    \      encodedParityView.append(\"0\");\n                    encodedParityView.append(\"\
    0\");\n                    encodedParityView.append(\"0\");\n\n\n            \
    \        bitStatus = encoding[5] >> 7 & 1;\n                    encoding[5] |=\
    \ bitStatus << 1 | bitStatus;\n                    encodedExpandView.append(\"\
    .\");\n                    encodedExpandView.append(\".\");\n                \
    \    encodedParityView.append(bitStatus);\n                    encodedParityView.append(bitStatus);\n\
    \                    encodedBytesLength = 6;\n                    continue;\n\
    \                }\n                textView.append((char) curByte);\n       \
    \         textHexView.append(String.format(\"%02X \", curByte));\n           \
    \     textBinView.append(String.format(\"%8s\", Integer.toBinaryString(curByte)).replace('\
    \ ', '0') + \" \");\n\n                bitStatus = curByte >> 7 & 1;\n       \
    \         encoding[5] |= bitStatus << 5 | bitStatus << 4;\n                encodedExpandView.append(bitStatus);\n\
    \                encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 6 & 1;\n                encoding[5] |= bitStatus << 3 | bitStatus\
    \ << 2;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                //parity\n\
    \                bitStatus = (encoding[5] >> 7 & 1) ^ (encoding[5] >> 5 & 1) ^\
    \ (encoding[5] >> 3 & 1);\n                encoding[5] |= bitStatus << 1 | bitStatus;\n\
    \                encodedExpandView.append(\".\");\n                encodedExpandView.append(\"\
    .\");\n                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                encoding[6] = 0;\n                encodedExpandView.append(\"\
    \ \");\n                encodedParityView.append(\" \");\n                bitStatus\
    \ = curByte >> 5 & 1;\n                encoding[6] |= bitStatus << 7 | bitStatus\
    \ << 6;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 4 & 1;\n                encoding[6] |= bitStatus << 5 | bitStatus\
    \ << 4;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 3 & 1;\n                encoding[6] |= bitStatus << 3 | bitStatus\
    \ << 2;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                //parity\n\
    \                bitStatus = (encoding[6] >> 7 & 1) ^ (encoding[6] >> 5 & 1) ^\
    \ (encoding[6] >> 3 & 1);\n                encoding[6] |= bitStatus << 1 | bitStatus;\n\
    \                encodedExpandView.append(\".\");\n                encodedExpandView.append(\"\
    .\");\n                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                encoding[7] = 0;\n                encodedExpandView.append(\"\
    \ \");\n                encodedParityView.append(\" \");\n                bitStatus\
    \ = curByte >> 2 & 1;\n                encoding[7] |= bitStatus << 7 | bitStatus\
    \ << 6;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte >> 1 & 1;\n                encoding[7] |= bitStatus << 5 | bitStatus\
    \ << 4;\n                encodedExpandView.append(bitStatus);\n              \
    \  encodedExpandView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                bitStatus\
    \ = curByte & 1;\n                encoding[7] |= bitStatus << 3 | bitStatus <<\
    \ 2;\n                encodedExpandView.append(bitStatus);\n                encodedExpandView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n                encodedParityView.append(bitStatus);\n\
    \n                //parity\n                bitStatus = (encoding[7] >> 7 & 1)\
    \ ^ (encoding[7] >> 5 & 1) ^ (encoding[7] >> 3 & 1);\n                encoding[7]\
    \ |= bitStatus << 1 | bitStatus;\n                encodedExpandView.append(\"\
    .\");\n                encodedExpandView.append(\".\");\n                encodedParityView.append(bitStatus);\n\
    \                encodedParityView.append(bitStatus);\n\n                encodedExpandView.append(\"\
    \ \");\n                encodedParityView.append(\" \");\n\n\n               \
    \ writer.write(encoding);\n                for (int i = 0; i < encodedBytesLength;\
    \ i++) {\n                    encodedHexView.append(String.format(\"%02X \", encoding[i]));\n\
    \                    encoding[i] = 0;\n                }\n\n                encodedBytesLength\
    \ = 0;\n                curByte = reader.read();\n            }\n\n          \
    \  for (int i = 0; i < encodedBytesLength; i++) {\n                    encodedHexView.append(String.format(\"\
    %02X \", encoding[i]));\n                    writer.write(encoding[i]);\n    \
    \                encoding[i] = 0;\n            }\n\n            System.out.println(\"\
    text view: \" + textView);\n            System.out.println(\"hex view: \" + textHexView);\n\
    \            System.out.println(\"bin view: \" + textBinView);\n\n           \
    \ System.out.println();\n\n            System.out.println(\"encoded.txt:\");\n\
    \            System.out.println(\"expand: \" + encodedExpandView);\n         \
    \   System.out.println(\"parity: \" + encodedParityView);\n            System.out.println(\"\
    hex view: \" + encodedHexView);\n\n        } catch (Exception e) {\n         \
    \   System.out.println(\"Exception occurred \" + e.getMessage());\n        }\n\
    \    }\n\n    private static void send() {\n        try (InputStream reader =\
    \ new FileInputStream(\"encoded.txt\");\n             FileOutputStream writer\
    \ = new FileOutputStream(\"received.txt\")) {\n\n            StringBuilder encodedHexView\
    \ = new StringBuilder();\n            StringBuilder encodedBinView = new StringBuilder();\n\
    \n            Random random = new Random();\n            int curByte = reader.read();\n\
    \            while (curByte != -1) {\n                curByte ^= 1 << random.nextInt(8);\n\
    \n                encodedHexView.append(String.format(\"%02X \", curByte));\n\
    \                encodedBinView.append(String.format(String.format(\"%8s\", Integer.toBinaryString(curByte)).replace('\
    \ ', '0') + \" \"));\n                writer.write(curByte);\n\n             \
    \   curByte = reader.read();\n            }\n\n            System.out.println(\"\
    encoded.txt:\");\n            System.out.println(\"hex view: \" + encodedHexView);\n\
    \            System.out.println(\"bin view: \" + encodedBinView);\n\n        }\
    \ catch (Exception e) {\n            System.out.println(\"Exception occurred:\
    \ \" + e.getMessage());\n        }\n    }\n\n    private static void decode()\
    \ {\n            try (InputStream reader = new FileInputStream(\"received.txt\"\
    );\n                 FileOutputStream writer = new FileOutputStream(\"decoded.txt\"\
    )) {\n\n            StringBuilder receivedBinView = new StringBuilder();\n   \
    \         StringBuilder receivedHexView = new StringBuilder();\n\n           \
    \ StringBuilder decodedCorrectBinaryView = new StringBuilder();\n            int[]\
    \ recievedData = new int[];\n\n            int curByte = reader.read();\n\n  \
    \          while (curByte != -1) {\n                receivedHexView.append(String.format(\"\
    %02X \", curByte));\n                receivedBinView.append(String.format(String.format(\"\
    %8s\", Integer.toBinaryString(curByte))\n                        .replace(' ',\
    \ '0') + \" \"));\n                \n                rec\n\n\n               \
    \ curByte = reader.read();\n            }\n\n            System.out.println(\"\
    received.txt:\");\n            System.out.println(\"hex view: \" + receivedHexView);\n\
    \            System.out.println(\"bin view: \" + receivedBinView);\n\n       \
    \     System.out.println();\n\n            System.out.println(\"decoded.txt:\"\
    );\n            System.out.println(\"correct: \" + decodedCorrectBinaryView);\n\
    \n        } catch (Exception e) {\n            System.out.println(\"Exception\
    \ has occurred: \" + e.getMessage());\n        }\n    }\n\n    public static void\
    \ main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n \
    \       System.out.print(\"Write a mode: \");\n        String mode = scanner.nextLine();\n\
    \        System.out.println();\n\n        if (mode.equals(\"encode\")) {\n   \
    \         encode();\n        } else if (mode.equals(\"send\")) {\n           \
    \ send();\n        } else if (mode.equals(\"decode\")) {\n            decode();\n\
    \        }\n\n//        char[] encodedText = new char[inputText.length() * 3];\n\
    //        for (int i = 0; i < inputText.length(); i++) {\n//            encodedText[i\
    \ * 3 + 0] = inputText.charAt(i);\n//            encodedText[i * 3 + 1] = inputText.charAt(i);\n\
    //            encodedText[i * 3 + 2] = inputText.charAt(i);\n//        }\n//\n\
    //        char[] erroredText = new char[encodedText.length];\n//        final\
    \ String allowedErrorChars = \"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM_\
    \ 1234567890\";\n//        Random random = new Random();\n//\n//        for (int\
    \ i = 0; i < encodedText.length; ++i) {\n//            if (i % 3 != 0) {\n// \
    \               erroredText[i] = encodedText[i];\n//            } else {\n// \
    \               char ch = encodedText[i];\n//                while (ch == encodedText[i])\
    \ {\n//                    ch = allowedErrorChars.charAt(random.nextInt(allowedErrorChars.length()));\n\
    //                }\n//                erroredText[i] = ch;\n//            }\n\
    //        }\n//\n//        char[] decodedFixedText = new char[encodedText.length\
    \ / 3];\n//        char a = '\\0';\n//        char b = '\\0';\n//        char\
    \ c = '\\0';\n//        for (int i = 0; i < erroredText.length; i += 3) {\n//\
    \            a = encodedText[i + 0];\n//            b = encodedText[i + 1];\n\
    //            c = encodedText[i + 2];\n//\n//            if (a == b || a == c)\
    \ {\n//                decodedFixedText[i / 3] = a;\n//            } else if (\
    \ b == c) {\n//                decodedFixedText[i / 3] = b;\n//            }\n\
    //        }\n//\n//\n//        System.out.println(inputText);\n//        System.out.println(new\
    \ String(encodedText));\n//        System.out.println(new String(erroredText));\n\
    //        System.out.println(new String(decodedFixedText));\n    }\n}\n"
  learner_created: false
- name: received.txt
  visible: true
  text: ";O\x13�\x04Ȱ�\n\b���L��8����ǀ=8��,\x10�\x028�\x01��\v��8��p7�C ,\v��\x0e\
    /��8=��\v��\x10\a�\x04�O\x1f��>\x1c��/��\x1f"
  learner_created: false
- name: encoded.txt
  visible: true
  text: "3\x0f3�\0���\x0f\0\0�����<���3��\0<<��<\0�\0<�\0��\x0f��<���3��\0<\x0f��\x0f\
    \x0f��<<��\x0f��\0\x0f\0\0�\x0f\x0f��<<��\x0f��\x0f"
  learner_created: false
- name: decoded.txt
  visible: true
  learner_created: false
- name: test/CorrecterTest.java
  visible: false
  text: |+
    import correcter.Main;

    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.File;
    import java.io.FileInputStream;
    import java.io.FileNotFoundException;
    import java.io.IOException;
    import java.util.ArrayList;
    import java.util.List;

    class TestClue {
        String input;
        String fileContent;

        TestClue(String input, String fileContent) {
            this.input = input;
            this.fileContent = fileContent;
        }
    }

    public class CorrecterTest extends StageTest<TestClue> {

        private static File received = null;
        private static File encoded = null;
        private static File decoded = null;

        public CorrecterTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            TestClue[] testClues = new TestClue[]{
                new TestClue("encode", "Eat more of these french buns!"),
                new TestClue("send",   "Eat more of these french buns!"),
                new TestClue("decode", "Eat more of these french buns!"),

                new TestClue("encode", "$ome rand0m messAge"),
                new TestClue("send",   "$ome rand0m messAge"),
                new TestClue("decode", "$ome rand0m messAge"),

                new TestClue("encode", "better call Saul 555-00-73!"),
                new TestClue("send",   "better call Saul 555-00-73!"),
                new TestClue("decode", "better call Saul 555-00-73!"),

                new TestClue("encode", "5548172 6548 225147 23656595 5155"),
                new TestClue("send",   "5548172 6548 225147 23656595 5155"),
                new TestClue("decode", "5548172 6548 225147 23656595 5155"),
            };

            List<TestCase<TestClue>> result = new ArrayList<>();

            for (int i = 0; i < testClues.length; i++) {
                result.add(new TestCase<TestClue>()
                    .setAttach(testClues[i])
                    .setInput(testClues[i].input)
                    .addFile("send.txt", testClues[i].fileContent));
            }

            return result;
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String path = System.getProperty("user.dir");

            received = null;
            encoded = null;
            decoded = null;

            searchReceived(path, "received.txt");
            searchEncoded(path, "encoded.txt");
            searchDecoded(path, "decoded.txt");

            String correctFileBinary = toBinary(clue.fileContent.getBytes());
            String correctFileEncoded = encodeFile(correctFileBinary);

            String action = clue.input;

            if (action.equals("encode")) {

                if (encoded == null) {
                    return new CheckResult(false,
                        "Can't find encoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] encodedContent;
                FileInputStream encodedStream;

                try {
                    encodedStream = new FileInputStream(encoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    encodedContent = encodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String encodedBinary = toBinary(encodedContent);

                return new CheckResult(encodedBinary.equals(correctFileEncoded));
            }

            if (action.equals("send")) {

                if (received == null) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it " +
                            "down or make sure the name of file is correct.");
                }

                byte[] receivedContent;

                FileInputStream receivedStream;

                try {
                    receivedStream = new FileInputStream(received);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    receivedContent = receivedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String receivedBinary = toBinary(receivedContent);


                return checkDifference(receivedBinary, correctFileEncoded);
            }



            if (action.equals("decode")) {

                if (decoded == null) {
                    return new CheckResult(false,
                        "Can't find decoded.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                byte[] decodedContent;


                FileInputStream decodedStream;

                try {
                    decodedStream = new FileInputStream(decoded);
                } catch (FileNotFoundException e) {
                    return new CheckResult(false,
                        "Can't find received.txt file. " +
                            "Make sure your program writes it down or " +
                            "make sure the name of file is correct.");
                }

                try {
                    decodedContent = decodedStream.readAllBytes();
                } catch (IOException e) {
                    e.printStackTrace();
                    throw new RuntimeException("Can't read the file");
                }

                String decodedBinary = toBinary(decodedContent);

                if (!decodedBinary.equals(correctFileBinary)) {
                    return new CheckResult(false, "The decoded text must match initial text!");
                }

                return CheckResult.correct();
            }

            throw new RuntimeException("Can't check the program");
        }

        private static String toBinary(byte[] bytes) {
            StringBuilder sb = new StringBuilder(bytes.length * Byte.SIZE);
            for (int i = 0; i < Byte.SIZE * bytes.length; i++) {
                sb.append((bytes[i / Byte.SIZE] << i % Byte.SIZE & 0x80) == 0 ? '0' : '1');
            }
            return sb.toString();
        }

        private static byte[] fromBinary(String s) {
            int sLen = s.length();
            byte[] toReturn = new byte[(sLen + Byte.SIZE - 1) / Byte.SIZE];
            char c;
            for (int i = 0; i < sLen; i++)
                if ((c = s.charAt(i)) == '1')
                    toReturn[i / Byte.SIZE] = (byte) (toReturn[i / Byte.SIZE] | (0x80 >>> (i % Byte.SIZE)));
                else if (c != '0')
                    throw new IllegalArgumentException();
            return toReturn;
        }

        private static void searchReceived(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchReceived(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        received = f;
                    }
                }
            }
        }

        private static void searchEncoded(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchEncoded(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        encoded = f;
                    }
                }
            }
        }

        private static void searchDecoded(String dirName, String fileName) {
            File dir = new File(dirName);
            File[] list = dir.listFiles();

            if (list != null) {
                for (File f : list) {
                    if (f.isDirectory()) {
                        searchDecoded(f.getAbsolutePath(), fileName);
                    } else if (f.getAbsolutePath().contains(fileName)) {
                        decoded = f;
                    }
                }
            }
        }

        private String encodeFile(String binaryString) {

            String encoded = "";

            for (int i = 0; i < binaryString.length(); i += 4) {

                if (i + 4 > binaryString.length()) {
                    throw new RuntimeException("Can't decode binary data");
                }

                int startSubIndex = i;
                int stopSubIndex = i + 4;

                String currSub = binaryString.substring(startSubIndex, stopSubIndex);

                String encodedPart;

                int parityBit1 = 0;
                int parityBit2 = 0;
                int parityBit4 = 0;

                if (currSub.charAt(0) == '1') {
                    parityBit1++;
                    parityBit2++;
                }

                if (currSub.charAt(1) == '1') {
                    parityBit1++;
                    parityBit4++;
                }

                if (currSub.charAt(2) == '1') {
                    parityBit2++;
                    parityBit4++;
                }

                if (currSub.charAt(3) == '1') {
                    parityBit1++;
                    parityBit2++;
                    parityBit4++;
                }

                encodedPart =
                    (parityBit1 % 2 == 1? "1": "0") +
                    (parityBit2 % 2 == 1? "1": "0") +
                    currSub.charAt(0) +
                    (parityBit4 % 2 == 1? "1": "0") +
                    currSub.charAt(1) +
                    currSub.charAt(2) +
                    currSub.charAt(3) +
                    "0";

                encoded += encodedPart;
            }

            return encoded;
        }

        private CheckResult checkDifference(String output, String correct) {
            if (output.isEmpty() && correct.isEmpty()) return CheckResult.correct();

            if (output.length() != correct.length()) {
                return new CheckResult(false,
                    "The program was expected to output " +
                        correct.length() / 8 +
                        " bytes, but output " +
                        output.length() / 8);
            }

            for (int i = 0; i < output.length(); i += 8) {
                String currOutputByte = output.substring(i, i+8);
                String currCorrectByte = correct.substring(i, i+8);

                int difference = 0;
                for (int j = 0; j < currCorrectByte.length(); j++) {
                    char currOutputBit = currOutputByte.charAt(j);
                    char currCorrectBit = currCorrectByte.charAt(j);

                    if (currCorrectBit != currOutputBit) {
                        difference++;
                    }
                }

                if (difference == 0) {
                    return new CheckResult(false,
                        "One of bytes from the input stayed the same but should be changed");
                }

                if (difference != 1) {
                    return new CheckResult(false,
                        "One of bytes from the input was changes in more than one bit");
                }
            }

            return CheckResult.correct();
        }
    }

  learner_created: false
feedback_link: https://hyperskill.org/projects/58/stages/316/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/58/stages/316/implement">JetBrains
    Academy</a>
  time: Sun, 16 Aug 2020 20:18:16 UTC
record: 4
